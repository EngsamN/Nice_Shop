name: Build

on:
  push:
    branches:
      - main
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions: read-all

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Verify Java Version
        run: |
          java -version
          which java
          echo "JAVA_HOME: $JAVA_HOME"
          echo "PATH: $PATH"

      - name: Test SonarQube Connection
        run: |
          echo "SonarQube URL: ${{ secrets.SONAR_HOST_URL }}"
          curl -u ${{ secrets.SONAR_TOKEN }}: ${{ secrets.SONAR_HOST_URL }}/api/server/version
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Install SonarQube Scanner
        run: |
          curl -sSLo sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
          unzip sonar-scanner-cli.zip
          mv sonar-scanner-4.6.2.2472-linux sonar-scanner
          rm -rf sonar-scanner/jre # Remove bundled JRE to ensure usage of Java 17
          echo "SonarQube Scanner installed at $(pwd)/sonar-scanner/bin"
          ls -la $(pwd)/sonar-scanner/bin

      - name: Verify Sonar Scanner Installation
        run: |
          export PATH=$(pwd)/sonar-scanner/bin:$PATH
          echo "PATH: $PATH"
          which sonar-scanner

      - name: SonarQube Scan
        run: |
          export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
          export PATH=$JAVA_HOME/bin:$(pwd)/sonar-scanner/bin:$PATH
          echo "Using JAVA_HOME=$JAVA_HOME"
          java -version
          which java
          which sonar-scanner
          sonar-scanner \
            -Dsonar.projectKey=Django_Shop \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -X
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@v1.0.0
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Show SonarQube Quality Gate Status
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
